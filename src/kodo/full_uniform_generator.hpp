// Copyright Steinwurf ApS 2011-2012.
// Distributed under the "STEINWURF RESEARCH LICENSE 1.0".
// See accompanying file LICENSE.rst or
// http://www.steinwurf.com/licensing

#ifndef KODO_RANDOM_UNIFORM_SYMBOL_ID_HPP
#define KODO_RANDOM_UNIFORM_SYMBOL_ID_HPP

#include <cstdint>

#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_int_distribution.hpp>

#include <fifi/fifi_utils.hpp>

namespace kodo
{

    /// @brief Generates uniformly random coding coefficients and write
    ///        all coefficients to the symbol id buffer.
    ///
    /// @ingroup symbol_id_layers
    /// @ingroup factory_layers
    template<class SuperCoder>
    class full_uniform_generator : public SuperCoder
    {
    public:

        /// The random generator used
        typedef boost::random::mt19937 generator_type;

        /// The type generated by this random generator
        typedef generator_type::result_type seed_type;

        /// The value type
        typedef typename SuperCoder::value_type value_type;

    public:

        /// @copydoc layer::initialize()
        void initialize(uint32_t symbols, uint32_t symbol_size)
            {
                SuperCoder::initialize(symbols, symbol_size);

                m_length = SuperCoder::coefficients_length();
                assert(m_length > 0);
            }


        /// @copydoc layer::generate_full(uint8_t*)
        void generate_full(uint8_t *coefficients)
            {
                assert(coefficients != 0);

                for(uint32_t i = 0; i < m_size; ++i)
                {
                    coefficients[i] = m_distribution(m_random_generator);
                }
            }

    protected:

        /// Seeds the random generator used
        /// @param seed The seed used for the random generator
        void seed(seed_type seed)
            {
                return m_random_generator.seed(seed);
            }

    protected:

        /// The distribution wrapping the random generator
        boost::random::uniform_int_distribution<uint8_t> m_distribution;

        /// The random generator
        generator_type m_random_generator;

        /// The number of bytes needed to store the symbol id
        /// coding coefficients
        uint32_t m_length;

    };

}

#endif

