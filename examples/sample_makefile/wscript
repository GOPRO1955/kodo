#! /usr/bin/env python
# encoding: utf-8

# Note that this file is not needed for building the example with make
# The only purpose of this file is to ensure that the make works as intended

import os

def configure(conf):
    # Check if make is installed on the system
    try:
        conf.find_program('make')
        conf.env.MAKE_INSTALLED = True
    except conf.errors.ConfigurationError as e:
        conf.env.MAKE_INSTALLED = False

def build(bld):

    # Build the example with waf to test if the source compiles
    bld.program(features = 'cxx',
                source   = 'main.cpp',
                target   = 'example_waf',
                use      = ['kodo_includes', 'boost_includes',
                            'fifi_includes', 'sak_includes'])

    # Call make with special arguments
    def invoke_make(task):

        args = []
        bld = task.generator.bld

        # Set the target path
        tgt = task.outputs[0].abspath()
        args += ['TARGET=' + tgt]

        # Set the C++ compiler
        args += ['CXX=' + bld.env.get_flat('CXX')]

        # Set the path for the dependencies
        sak_dir = os.path.join(bld.dependency_path('sak'),'src')
        args += ['SAK_DIR=' + sak_dir]
        fifi_dir = os.path.join(bld.dependency_path('fifi'),'src')
        args += ['FIFI_DIR=' + fifi_dir]
        boost_dir = bld.dependency_path('boost')
        args += ['BOOST_DIR=' + boost_dir]

        # Set special flags for boost on android
        if bld.is_mkspec_platform('android'):
            defines = ['-D__GLIBC__', '-D_GLIBCXX_USE_WCHAR_T',
                       '-D_GLIBCXX_USE_C99_STDINT_TR1']
            args += ['EXTRA_FLAGS="{}"'.format(' '.join(defines))]

        # Get the current directory
        current_dir = task.generator.path.abspath()

        ret = bld.exec_command(['make'] + args, cwd=current_dir)

        if ret:
            bld.fatal('make returned %r' % ret)

        return ret

    # Build the example with make (only if make is installed)
    if bld.env.MAKE_INSTALLED:
        bld(rule     = invoke_make,
            name     = 'sample_makefile',
            always   = True,
            source   = 'main.cpp',
            target   = 'example_make')

