"""
Copyright Steinwurf ApS 2011-2013.
Distributed under the "STEINWURF RESEARCH LICENSE 1.0".
See accompanying file LICENSE.rst or
http://www.steinwurf.com/licensing
"""
import scipy

import pandas
assert pandas.version.version.split(".")[:2] >= ['0','12'],\
    'You need a newer version of pandas'

import pymongo
assert pymongo.version_tuple[:2] >= (2,5),\
    'You need a newer version of pymongo'
from pymongo import MongoClient

from component import Component

from datetime import datetime, timedelta
now = datetime.utcnow()
today = now.date()
today = datetime(today.year, today.month, today.day)
yesterday = today - timedelta(1)

class JsonFile(Component):
    """docstring for JsonFile"""
    def __init__(self, jsonfile = None):
        super(JsonFile, self).__init__()
        self = jsonfile

    def add_arguments(self, parser):
        parser.add_argument('--jsonfile',
            action  = 'store',
            default = '',
            help    = 'The .json file generated by the benchmark, if none '
                      'provided plots will be based on data from the database.'
        )

    def get_data(self):
        if self._has('jsonfile'):
            df = pandas.read_json(self._get('jsonfile'))
            return df
        else:
            return None

def mongo_connect():
    database = 'benchmark'
    address = '176.28.49.184'
    username = 'guest'
    password = 'none'

    client = MongoClient(MongoDbQuery.address)
    db = client[MongoDbQuery.database]
    db.authenticate(MongoDbQuery.username,
                    MongoDbQuery.password)
    return db

class MongoDbQuery(Component):

    """docstring for MongoDbQuery"""
    def __init__(self, collection, query):
        super(MongoDbQuery, self).__init__()
        self.collection = collection
        self.query = query

    def get_collection(self, db):
        return list(db[self._get('collection')].find(self._get('query')))

    def get_data(self):
        db = mongo_connect()
        data = pandas.DataFrame.from_records(self.get_collection(db))
        return data

class MultiMongoDbQuery(Component):
    """docstring for MultiMongoDbQuery"""
    def __init__(self, mongo_db_queries):
        super(MultiMongoDbQuery, self).__init__()
        self.mongo_db_queries = mongo_db_queries

    def get_data(self):
        db = mongo_connect()
        return pandas.DataFrame.from_records(scipy.hstack(
            [dbquery.get_collection(db) for dbquery in self.mongo_db_queries])