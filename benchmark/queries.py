"""
Copyright Steinwurf ApS 2011-2013.
Distributed under the "STEINWURF RESEARCH LICENSE 1.0".
See accompanying file LICENSE.rst or
http://www.steinwurf.com/licensing
"""

import pandas
assert pandas.version.version.split(".")[:2] >= ['1','12'],\
    'You need a newer version of pandas'

import pymongo
assert pymongo.version_tuple[:2] >= (2,5),\
    'You need a newer version of pymongo'
from pymongo import MongoClient

from datetime import datetime, timedelta
now = datetime.utcnow()
today = now.date()
today = datetime(today.year, today.month, today.day)
yesterday = today - timedelta(1)

class JsonFileQuery(object):
    """docstring for JsonFileQuery"""
    def __init__(self):
        super(JsonFileQuery, self).__init__()
    def add_options(self, parser):
        parser.add_argument('--jsonfile',
            action  = 'store',
            default = '',
            help    = 'The .json file generated by the benchmark, if none '
                      'provided plots will be based on data from the database.'
        )

    def query(self, options):
        df = pandas.read_json(options['jsonfile'])
        return df

address = '176.28.49.184'
username = 'guest'
password = 'none'

def connect_database():
    """
    Connect to the benchmark database
    """
    client = MongoClient(address)
    db = client["benchmark"]
    db.authenticate(username, password)
    return db

class RecentDataQuery(object):
    """docstring for RecentDataQuery"""
    def __init__(self, collection):
        super(RecentDataQuery, self).__init__()
        self.collection = collection

    def add_options(self, parser):
        pass

    def query(self, options):
        query = {
            "branch" : "master",
            "scheduler": "kodo-nightly-benchmark",
            "utc_date" : {"$gte": ps.yesterday}
        }

        db = ps.connect_database()
        mc = db[self.collection].find(query)
        df = pd.DataFrame.from_records( list(mc) )

