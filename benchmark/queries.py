import scipy

import pandas
assert scipy.any(
    scipy.array(pandas.version.version.split(".")) >= ['1','12',scipy.inf]), \
        "You need a newer version of pandas"

import pymongo
assert pymongo.version_tuple[:2] >= (2,5), "You need a newer version of pymongo"
from pymongo import MongoClient
address = "176.28.49.184"
username = "guest"
password = "none"

def connect_database():
    """
    Connect to the benchmark database
    """
    client = MongoClient(address)
    db = client["benchmark"]
    db.authenticate(username, password)
    return db

class JsonFileQuery(object):
    """docstring for JsonFileQuery"""
    def __init__(self):
        super(JsonFileQuery, self).__init__()
    def add_options(parser):
        parser.add_argument('--jsonfile',
            action  = 'store',
            default = '',
            help    = 'The .json file generated by the benchmark, if none '
                      'provided plots will be based on data from the database.'
        )

    def query(options):
        df = pandas.read_json(options['jsonfile'])
        return df

class RecentDataQuery(object):
    """docstring for RecentDataQuery"""
    def __init__(self):
        super(RecentDataQuery, self).__init__()

    def add_options(parser):
        pass

    def query(options):
        query = {
            "branch" : "master",
            "scheduler": "kodo-nightly-benchmark",
            "utc_date" : {"$gte": ps.yesterday, "$lt": ps.today}
        }

        db = ps.connect_database()
        mc = db.kodo_decoding_probability.find(query)
        df = pd.DataFrame.from_records( list(mc) )

